// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createInitialSessionStateStmt, err = db.PrepareContext(ctx, createInitialSessionState); err != nil {
		return nil, fmt.Errorf("error preparing query CreateInitialSessionState: %w", err)
	}
	if q.createPlayerStmt, err = db.PrepareContext(ctx, createPlayer); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePlayer: %w", err)
	}
	if q.createSessionStmt, err = db.PrepareContext(ctx, createSession); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSession: %w", err)
	}
	if q.getLatestSessionStateByPlayerIdStmt, err = db.PrepareContext(ctx, getLatestSessionStateByPlayerId); err != nil {
		return nil, fmt.Errorf("error preparing query GetLatestSessionStateByPlayerId: %w", err)
	}
	if q.getPlayerByIdStmt, err = db.PrepareContext(ctx, getPlayerById); err != nil {
		return nil, fmt.Errorf("error preparing query GetPlayerById: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createInitialSessionStateStmt != nil {
		if cerr := q.createInitialSessionStateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createInitialSessionStateStmt: %w", cerr)
		}
	}
	if q.createPlayerStmt != nil {
		if cerr := q.createPlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPlayerStmt: %w", cerr)
		}
	}
	if q.createSessionStmt != nil {
		if cerr := q.createSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSessionStmt: %w", cerr)
		}
	}
	if q.getLatestSessionStateByPlayerIdStmt != nil {
		if cerr := q.getLatestSessionStateByPlayerIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLatestSessionStateByPlayerIdStmt: %w", cerr)
		}
	}
	if q.getPlayerByIdStmt != nil {
		if cerr := q.getPlayerByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPlayerByIdStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                  DBTX
	tx                                  *sql.Tx
	createInitialSessionStateStmt       *sql.Stmt
	createPlayerStmt                    *sql.Stmt
	createSessionStmt                   *sql.Stmt
	getLatestSessionStateByPlayerIdStmt *sql.Stmt
	getPlayerByIdStmt                   *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                  tx,
		tx:                                  tx,
		createInitialSessionStateStmt:       q.createInitialSessionStateStmt,
		createPlayerStmt:                    q.createPlayerStmt,
		createSessionStmt:                   q.createSessionStmt,
		getLatestSessionStateByPlayerIdStmt: q.getLatestSessionStateByPlayerIdStmt,
		getPlayerByIdStmt:                   q.getPlayerByIdStmt,
	}
}
