// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: session.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createInitialSessionState = `-- name: CreateInitialSessionState :exec
INSERT INTO sessionstate (session_id, boards)
VALUES ($1, $2)
`

type CreateInitialSessionStateParams struct {
	SessionID string  `json:"session_id"`
	Boards    []int32 `json:"boards"`
}

func (q *Queries) CreateInitialSessionState(ctx context.Context, arg CreateInitialSessionStateParams) error {
	_, err := q.exec(ctx, q.createInitialSessionStateStmt, createInitialSessionState, arg.SessionID, pq.Array(arg.Boards))
	return err
}

const createSession = `-- name: CreateSession :exec
INSERT INTO session (session_id, uid, created_at, gameover, winner, board_size, number_of_boards, difficulty)
VALUES ($1, $2, now(), false, NULL, $3, $4, $5)
`

type CreateSessionParams struct {
	SessionID      string        `json:"session_id"`
	Uid            string        `json:"uid"`
	BoardSize      sql.NullInt32 `json:"board_size"`
	NumberOfBoards sql.NullInt32 `json:"number_of_boards"`
	Difficulty     sql.NullInt32 `json:"difficulty"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.exec(ctx, q.createSessionStmt, createSession,
		arg.SessionID,
		arg.Uid,
		arg.BoardSize,
		arg.NumberOfBoards,
		arg.Difficulty,
	)
	return err
}

const getLatestSessionStateByPlayerId = `-- name: GetLatestSessionStateByPlayerId :one
SELECT 
    s.session_id,
    s.uid,
    s.created_at,
    s.gameover,
    s.winner,
    s.board_size,
    s.number_of_boards,
    s.difficulty,
    ss.boards
FROM session s
JOIN sessionstate ss
    ON s.session_id = ss.session_id
WHERE s.uid = $1
    AND s.created_at >= now() - interval '15 minutes'
ORDER BY s.created_at DESC
LIMIT 1
`

type GetLatestSessionStateByPlayerIdRow struct {
	SessionID      string        `json:"session_id"`
	Uid            string        `json:"uid"`
	CreatedAt      sql.NullTime  `json:"created_at"`
	Gameover       sql.NullBool  `json:"gameover"`
	Winner         sql.NullBool  `json:"winner"`
	BoardSize      sql.NullInt32 `json:"board_size"`
	NumberOfBoards sql.NullInt32 `json:"number_of_boards"`
	Difficulty     sql.NullInt32 `json:"difficulty"`
	Boards         []int32       `json:"boards"`
}

func (q *Queries) GetLatestSessionStateByPlayerId(ctx context.Context, uid string) (GetLatestSessionStateByPlayerIdRow, error) {
	row := q.queryRow(ctx, q.getLatestSessionStateByPlayerIdStmt, getLatestSessionStateByPlayerId, uid)
	var i GetLatestSessionStateByPlayerIdRow
	err := row.Scan(
		&i.SessionID,
		&i.Uid,
		&i.CreatedAt,
		&i.Gameover,
		&i.Winner,
		&i.BoardSize,
		&i.NumberOfBoards,
		&i.Difficulty,
		pq.Array(&i.Boards),
	)
	return i, err
}
