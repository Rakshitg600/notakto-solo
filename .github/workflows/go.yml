name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod tidy && go mod download

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

# Deploy to PROD (ONLY on main push)
  deploy:
    needs: build                    # Run only if build pass
    if: github.ref == 'refs/heads/main'  # Only on main push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Install Goose
      run: |
        go install github.com/pressly/goose/v3/cmd/goose@latest
        echo "$HOME/go/bin" >> $GITHUB_PATH
        goose --version


    # - name: Run Goose Migrations on Staging (Test First)
    #   env:
    #     STAGING_DB: ${{ secrets.STAGING_DB_URL }}
    #   run: |
    #     goose -dir migrations up

    - name: Generate SQLC Code
      run: |
        go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest
        echo "$HOME/go/bin" >> $GITHUB_PATH
        sqlc generate

    - name: Run Goose Migrations on PROD 
      env:
        PROD_DB: ${{ secrets.DATABASE_URL }}
      run: |
        goose -dir db/migrations postgres "$DATABASE_URL" up
        echo "âœ… PROD DB UPDATED!"