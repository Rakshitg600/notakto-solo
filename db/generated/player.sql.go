// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: player.sql

package db

import (
	"context"
	"database/sql"
)

const createPlayer = `-- name: CreatePlayer :exec
INSERT INTO Player (uid, email, name, profile_pic)
VALUES ($1, $2, $3, $4)
`

type CreatePlayerParams struct {
	Uid        string         `json:"uid"`
	Email      string         `json:"email"`
	Name       string         `json:"name"`
	ProfilePic sql.NullString `json:"profile_pic"`
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) error {
	_, err := q.exec(ctx, q.createPlayerStmt, createPlayer,
		arg.Uid,
		arg.Email,
		arg.Name,
		arg.ProfilePic,
	)
	return err
}

const getPlayerById = `-- name: GetPlayerById :one
SELECT uid, name, email, profile_pic FROM Player WHERE uid = $1
`

func (q *Queries) GetPlayerById(ctx context.Context, uid string) (Player, error) {
	row := q.queryRow(ctx, q.getPlayerByIdStmt, getPlayerById, uid)
	var i Player
	err := row.Scan(
		&i.Uid,
		&i.Name,
		&i.Email,
		&i.ProfilePic,
	)
	return i, err
}

const updatePlayerName = `-- name: UpdatePlayerName :one
UPDATE Player SET name = $2 WHERE uid = $1 RETURNING uid, name, email, profile_pic
`

type UpdatePlayerNameParams struct {
	Uid  string `json:"uid"`
	Name string `json:"name"`
}

func (q *Queries) UpdatePlayerName(ctx context.Context, arg UpdatePlayerNameParams) (Player, error) {
	row := q.queryRow(ctx, q.updatePlayerNameStmt, updatePlayerName, arg.Uid, arg.Name)
	var i Player
	err := row.Scan(
		&i.Uid,
		&i.Name,
		&i.Email,
		&i.ProfilePic,
	)
	return i, err
}
