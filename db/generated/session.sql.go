// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: session.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createInitialSessionState = `-- name: CreateInitialSessionState :exec
INSERT INTO sessionstate (
    session_id,
    boards,
    current_player,
    winner,
    board_size,
    number_of_boards,
    difficulty,
    game_history,
    gameover
)
VALUES (
    $1,                          
    $2,                           
    1,                            
    '',                           
    $3,                           
    $4,                           
    $5,                           
    $6,                  
    false                         
)
`

type CreateInitialSessionStateParams struct {
	SessionID      string        `json:"session_id"`
	Boards         [][]string    `json:"boards"`
	BoardSize      sql.NullInt32 `json:"board_size"`
	NumberOfBoards sql.NullInt32 `json:"number_of_boards"`
	Difficulty     sql.NullInt32 `json:"difficulty"`
	GameHistory    [][][]string  `json:"game_history"`
}

func (q *Queries) CreateInitialSessionState(ctx context.Context, arg CreateInitialSessionStateParams) error {
	_, err := q.exec(ctx, q.createInitialSessionStateStmt, createInitialSessionState,
		arg.SessionID,
		pq.Array(arg.Boards),
		arg.BoardSize,
		arg.NumberOfBoards,
		arg.Difficulty,
		pq.Array(arg.GameHistory),
	)
	return err
}

const createSession = `-- name: CreateSession :exec
INSERT INTO session (session_id, uid, expired, created_at)
VALUES ($1, $2, false, now())
`

type CreateSessionParams struct {
	SessionID string `json:"session_id"`
	Uid       string `json:"uid"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.exec(ctx, q.createSessionStmt, createSession, arg.SessionID, arg.Uid)
	return err
}

const getLatestSessionStateByPlayerId = `-- name: GetLatestSessionStateByPlayerId :one
SELECT 
    s.session_id,
    s.uid,
    s.expired,
    s.created_at,
    ss.boards,
    ss.current_player,
    ss.winner,
    ss.board_size,
    ss.number_of_boards,
    ss.difficulty,
    ss.game_history,
    ss.gameover
FROM session s
JOIN sessionstate ss
  ON s.session_id = ss.session_id
WHERE s.uid = $1
  AND s.created_at >= now() - interval '15 minutes'
ORDER BY s.created_at DESC
LIMIT 1
`

type GetLatestSessionStateByPlayerIdRow struct {
	SessionID      string         `json:"session_id"`
	Uid            string         `json:"uid"`
	Expired        sql.NullBool   `json:"expired"`
	CreatedAt      sql.NullTime   `json:"created_at"`
	Boards         [][]string     `json:"boards"`
	CurrentPlayer  sql.NullInt32  `json:"current_player"`
	Winner         sql.NullString `json:"winner"`
	BoardSize      sql.NullInt32  `json:"board_size"`
	NumberOfBoards sql.NullInt32  `json:"number_of_boards"`
	Difficulty     sql.NullInt32  `json:"difficulty"`
	GameHistory    [][][]string   `json:"game_history"`
	Gameover       sql.NullBool   `json:"gameover"`
}

func (q *Queries) GetLatestSessionStateByPlayerId(ctx context.Context, uid string) (GetLatestSessionStateByPlayerIdRow, error) {
	row := q.queryRow(ctx, q.getLatestSessionStateByPlayerIdStmt, getLatestSessionStateByPlayerId, uid)
	var i GetLatestSessionStateByPlayerIdRow
	err := row.Scan(
		&i.SessionID,
		&i.Uid,
		&i.Expired,
		&i.CreatedAt,
		pq.Array(&i.Boards),
		&i.CurrentPlayer,
		&i.Winner,
		&i.BoardSize,
		&i.NumberOfBoards,
		&i.Difficulty,
		pq.Array(&i.GameHistory),
		&i.Gameover,
	)
	return i, err
}
